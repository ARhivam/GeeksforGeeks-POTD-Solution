class Solution {
public:
    int peakElement(int arr[], int n) {
        int low = 0, high = n - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            // Check if mid is a peak element
            if ((mid == 0 || arr[mid] >= arr[mid - 1]) && (mid == n - 1 || arr[mid] >= arr[mid + 1])) {
                return mid;
            }
            // If the left neighbor is greater, search in the left half
            else if (mid > 0 && arr[mid] < arr[mid - 1]) {
                high = mid - 1;
            }
            // If the right neighbor is greater, search in the right half
            else {
                low = mid + 1;
            }
        }
        
        return -1; // This return is only for completeness, though the problem guarantees a peak exists.
    }
};
